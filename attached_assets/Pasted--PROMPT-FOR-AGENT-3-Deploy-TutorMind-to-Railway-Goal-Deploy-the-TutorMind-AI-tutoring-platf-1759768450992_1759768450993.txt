# PROMPT FOR AGENT 3: Deploy TutorMind to Railway

## Goal
Deploy the TutorMind AI tutoring platform to Railway with PostgreSQL database, proper environment configuration, and custom domain setup.

---

## PREREQUISITES

Before starting, ensure you have:
- [ ] Railway account created at https://railway.app
- [ ] GitHub repository with latest code
- [ ] All environment variables documented
- [ ] Domain ready (jiemastery.ai)

---

## STEP 1: PREPARE APPLICATION FOR DEPLOYMENT

### A. Create Railway Configuration Files

**File: `railway.json`** (new file in root)
```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "npm run start",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

**File: `nixpacks.toml`** (new file in root)
```toml
[phases.setup]
nixPkgs = ["nodejs_20", "npm-9_x"]

[phases.install]
cmds = ["npm ci"]

[phases.build]
cmds = ["npm run build"]

[start]
cmd = "npm run start"
```

### B. Update Package.json Scripts

Ensure these scripts exist in `package.json`:

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "start": "NODE_ENV=production node server/index.js",
    "db:migrate": "drizzle-kit push:pg",
    "db:studio": "drizzle-kit studio"
  }
}
```

### C. Update Server Entry Point

**File: `server/index.js`** (update existing)

Ensure it binds to `0.0.0.0` and uses Railway's PORT:

```javascript
const express = require('express');
const path = require('path');
const app = express();

// Get port from environment (Railway sets this)
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../dist')));
  
  // Handle client-side routing
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../dist/index.html'));
  });
}

// API routes
app.use('/api', require('./routes'));

// Start server - MUST bind to 0.0.0.0 for Railway
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
});
```

### D. Create .env.example

**File: `.env.example`** (new file in root)

```bash
# Database
DATABASE_URL=postgresql://user:password@host:port/database

# ElevenLabs
ELEVENLABS_API_KEY=your_elevenlabs_api_key

# Resend (Email)
RESEND_API_KEY=your_resend_api_key
RESEND_FROM_EMAIL=hello@jiemastery.ai

# Stripe (Payment)
STRIPE_SECRET_KEY=sk_live_...
STRIPE_PUBLISHABLE_KEY=pk_live_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Session Secret
SESSION_SECRET=your_random_secret_key_here

# Node Environment
NODE_ENV=production

# Frontend URL (for CORS)
FRONTEND_URL=https://jiemastery.ai
```

---

## STEP 2: DEPLOY TO RAILWAY

### A. Create New Railway Project

1. Go to https://railway.app
2. Click **"New Project"**
3. Choose **"Deploy from GitHub repo"**
4. Select your TutorMind repository
5. Railway will detect it's a Node.js app

### B. Add PostgreSQL Database

1. In your Railway project, click **"+ New"**
2. Select **"Database"**
3. Choose **"PostgreSQL"**
4. Railway automatically creates the database
5. Copy the `DATABASE_URL` (we'll need this)

**Important:** Railway provides the connection string in this format:
```
postgresql://postgres:password@containers-us-west-123.railway.app:1234/railway
```

### C. Configure Environment Variables

In Railway project settings, click **"Variables"** tab and add:

```bash
# Database (Railway provides this automatically, verify it's set)
DATABASE_URL=postgresql://postgres:...

# ElevenLabs
ELEVENLABS_API_KEY=your_elevenlabs_api_key

# Resend
RESEND_API_KEY=re_...
RESEND_FROM_EMAIL=hello@jiemastery.ai

# Stripe
STRIPE_SECRET_KEY=sk_live_...
STRIPE_PUBLISHABLE_KEY=pk_live_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Session
SESSION_SECRET=generate_random_32_char_string

# Environment
NODE_ENV=production

# Frontend
FRONTEND_URL=https://jiemastery.ai
```

**To generate SESSION_SECRET:**
```bash
node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
```

### D. Initial Deployment

Railway will automatically:
1. Detect Node.js app
2. Install dependencies (`npm ci`)
3. Build the app (`npm run build`)
4. Start the server (`npm run start`)

Watch the deployment logs in Railway dashboard.

---

## STEP 3: RUN DATABASE MIGRATIONS

After first deployment, you need to set up the database schema.

### Option A: Using Railway CLI (Recommended)

1. **Install Railway CLI:**
```bash
npm i -g @railway/cli
```

2. **Login to Railway:**
```bash
railway login
```

3. **Link to your project:**
```bash
railway link
```

4. **Run migrations:**
```bash
railway run npm run db:migrate
```

### Option B: Using Railway Dashboard

1. Go to your Railway project
2. Click on your service
3. Go to **"Settings"** → **"Deploy"**
4. Under **"Custom Start Command"**, temporarily set:
   ```bash
   npm run db:migrate && npm run start
   ```
5. Redeploy
6. After successful deployment, remove the migration command
7. Set back to: `npm run start`

### C. Verify Database Setup

Check that tables were created:
1. In Railway, click on your **PostgreSQL** service
2. Click **"Query"** tab
3. Run: `SELECT tablename FROM pg_tables WHERE schemaname='public';`
4. You should see all your tables (users, subscriptions, documents, etc.)

---

## STEP 4: CONFIGURE CUSTOM DOMAIN

### A. Get Railway Domain

1. In Railway project, click your service
2. Go to **"Settings"** → **"Networking"**
3. Railway provides a default domain like: `tutormind-production.up.railway.app`
4. Test it works before adding custom domain

### B. Add Custom Domain (jiemastery.ai)

1. Still in **"Settings"** → **"Networking"**
2. Click **"Custom Domain"**
3. Enter: `jiemastery.ai`
4. Railway will show DNS records to add

### C. Update DNS in GoDaddy

Go to GoDaddy DNS management and add:

**For Root Domain (jiemastery.ai):**
```
Type: A
Name: @
Value: [Railway's IP address shown]
TTL: 1 Hour
```

**For WWW Subdomain:**
```
Type: CNAME
Name: www
Value: tutormind-production.up.railway.app
TTL: 1 Hour
```

**Alternative (if Railway provides CNAME for root):**
```
Type: CNAME
Name: @
Value: tutormind-production.up.railway.app
TTL: 1 Hour
```

### D. Wait for DNS Propagation

- DNS changes take 10-60 minutes
- Check status: https://dnschecker.org
- Railway will automatically provision SSL certificate once DNS is verified

### E. Update Environment Variables

Once domain is working, update in Railway:
```bash
FRONTEND_URL=https://jiemastery.ai
```

Redeploy the app.

---

## STEP 5: CONFIGURE EXTERNAL SERVICES

### A. Update Stripe Webhook URL

1. Go to Stripe Dashboard → Developers → Webhooks
2. Add new endpoint: `https://jiemastery.ai/api/stripe/webhook`
3. Select events:
   - `checkout.session.completed`
   - `customer.subscription.created`
   - `customer.subscription.updated`
   - `customer.subscription.deleted`
   - `invoice.payment_succeeded`
   - `invoice.payment_failed`
4. Copy the **Webhook Secret** (starts with `whsec_`)
5. Update in Railway: `STRIPE_WEBHOOK_SECRET=whsec_...`

### B. Update Resend Domain (if needed)

If using custom domain for emails:
1. Verify `jiemastery.ai` is verified in Resend
2. Update `RESEND_FROM_EMAIL=hello@jiemastery.ai`

### C. Update ElevenLabs Callback URLs (if using webhooks)

If ElevenLabs has webhooks for conversation events:
1. Update callback URL to: `https://jiemastery.ai/api/elevenlabs/webhook`

---

## STEP 6: MONITORING & HEALTH CHECKS

### A. Add Health Check Endpoint

**File: `server/routes/health.js`** (new file)

```javascript
const express = require('express');
const router = express.Router();
const { db } = require('../db');

router.get('/health', async (req, res) => {
  try {
    // Check database connection
    await db.execute('SELECT 1');
    
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      database: 'connected',
      uptime: process.uptime()
    });
  } catch (error) {
    res.status(500).json({
      status: 'unhealthy',
      error: error.message
    });
  }
});

module.exports = router;
```

Add to main routes:
```javascript
app.use('/api', require('./routes/health'));
```

### B. Set Up Railway Health Check

1. Go to Railway project → Service → Settings
2. Under **"Health Check"**, enable it
3. Set path: `/api/health`
4. Timeout: 30 seconds
5. Interval: 60 seconds

### C. Monitor Logs

Railway provides real-time logs:
1. Click on your service
2. Go to **"Deployments"** tab
3. Click **"View Logs"**

---

## STEP 7: PERFORMANCE OPTIMIZATION

### A. Enable Gzip Compression

**File: `server/index.js`** (update)

```javascript
const compression = require('compression');

// Enable gzip compression
app.use(compression());
```

Install dependency:
```bash
npm install compression
```

### B. Set Production Build Optimizations

**File: `vite.config.js`** (update)

```javascript
export default defineConfig({
  build: {
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: true, // Remove console.logs in production
      },
    },
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom', 'react-router-dom'],
        },
      },
    },
  },
});
```

### C. Add Caching Headers

**File: `server/index.js`** (update)

```javascript
// Cache static assets
app.use(express.static(path.join(__dirname, '../dist'), {
  maxAge: '1y',
  etag: true,
}));
```

---

## STEP 8: SECURITY CHECKLIST

### A. Environment Variables

- [ ] All sensitive keys in Railway environment (not in code)
- [ ] `.env` file is in `.gitignore`
- [ ] No API keys committed to Git history
- [ ] SESSION_SECRET is strong random string

### B. Database Security

- [ ] Database URL uses SSL (`?sslmode=require`)
- [ ] Database has strong password
- [ ] Database is not publicly accessible

### C. API Security

- [ ] CORS configured properly
- [ ] Rate limiting enabled
- [ ] Input validation on all endpoints
- [ ] SQL injection prevention (using parameterized queries)
- [ ] XSS prevention (sanitizing inputs)

**Add Rate Limiting:**

```bash
npm install express-rate-limit
```

```javascript
const rateLimit = require('express-rate-limit');

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
});

app.use('/api/', limiter);
```

### D. HTTPS & SSL

- [ ] Railway automatically provisions SSL
- [ ] Force HTTPS redirect
- [ ] HSTS header enabled

**Add HTTPS redirect:**

```javascript
// Force HTTPS in production
if (process.env.NODE_ENV === 'production') {
  app.use((req, res, next) => {
    if (req.header('x-forwarded-proto') !== 'https') {
      res.redirect(`https://${req.header('host')}${req.url}`);
    } else {
      next();
    }
  });
}
```

---

## STEP 9: POST-DEPLOYMENT TESTING

### A. Functional Testing

Test all major features:
- [ ] User registration/login
- [ ] Subscription purchase (test mode)
- [ ] Document upload
- [ ] AI tutor conversation
- [ ] Admin panel access
- [ ] Email notifications
- [ ] Discount code application

### B. Performance Testing

- [ ] Page load time < 3 seconds
- [ ] Time to interactive < 5 seconds
- [ ] Check with Google PageSpeed Insights
- [ ] Test on mobile devices

### C. Error Monitoring

Set up error tracking:
1. Consider adding Sentry for error monitoring
2. Monitor Railway logs for errors
3. Set up alerts for critical errors

---

## STEP 10: BACKUP & MAINTENANCE

### A. Database Backups

Railway PostgreSQL includes automatic backups:
1. Go to PostgreSQL service
2. Click **"Backups"** tab
3. Backups are automatic (retained for 7 days on free tier)

**Upgrade to Pro for:**
- 30-day backup retention
- Point-in-time recovery
- Manual backup triggers

### B. Monitoring Dashboard

Set up monitoring:
1. Railway provides basic metrics
2. Monitor:
   - CPU usage
   - Memory usage
   - Network traffic
   - Database connections

### C. Scaling Configuration

If you need to scale:
1. Railway project → Settings → **"Resources"**
2. Adjust:
   - Memory allocation (512MB default)
   - CPU allocation
   - Replicas (for high availability)

---

## COMMON ISSUES & TROUBLESHOOTING

### Issue 1: "Application failed to start"

**Solution:**
- Check logs in Railway dashboard
- Verify `start` command in package.json
- Ensure port binding to `0.0.0.0`
- Check all environment variables are set

### Issue 2: Database connection fails

**Solution:**
- Verify `DATABASE_URL` is set correctly
- Check database service is running
- Ensure connection string includes SSL: `?sslmode=require`
- Test connection using Railway CLI: `railway run node -e "require('./server/db')"`

### Issue 3: "Cannot GET /" after deployment

**Solution:**
- Verify build completed successfully
- Check `dist` folder exists after build
- Ensure static file serving is configured
- Check catch-all route for SPA

### Issue 4: CORS errors

**Solution:**
```javascript
const cors = require('cors');

app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));
```

### Issue 5: Environment variables not updating

**Solution:**
- After changing environment variables in Railway
- Trigger a new deployment (Settings → Deploy → Deploy Now)
- Variables only update on new deployments

---

## DEPLOYMENT CHECKLIST

### Pre-Deployment
- [ ] Code pushed to GitHub
- [ ] All dependencies in package.json
- [ ] Build script works locally
- [ ] Database schema finalized
- [ ] Environment variables documented

### Railway Setup
- [ ] Project created
- [ ] PostgreSQL database added
- [ ] Environment variables configured
- [ ] Initial deployment successful
- [ ] Database migrations run

### Domain Configuration
- [ ] Custom domain added in Railway
- [ ] DNS records updated in GoDaddy
- [ ] SSL certificate provisioned
- [ ] Domain resolves correctly

### External Services
- [ ] Stripe webhooks updated
- [ ] Resend domain verified
- [ ] ElevenLabs configured
- [ ] Email sending tested

### Testing
- [ ] All features work in production
- [ ] Payment flow tested
- [ ] Admin panel accessible
- [ ] Mobile responsive
- [ ] Performance acceptable

### Monitoring
- [ ] Health check endpoint working
- [ ] Logs monitored
- [ ] Error tracking set up
- [ ] Backup strategy in place

---

## ESTIMATED COSTS

**Railway Pricing:**
- **Free Tier:** $0/month
  - 500 hours execution time
  - 512MB RAM
  - 1GB disk
  - Good for testing/development

- **Pro Plan:** $20/month + usage
  - Unlimited execution time
  - Custom resources
  - Better backups
  - Priority support

**Database:** Included in Railway subscription

**Estimate for Production:**
- Small app: ~$20-30/month (Railway Pro)
- Medium traffic: ~$40-60/month
- High traffic: $100+/month (may need dedicated DB)

---

## NEXT STEPS AFTER DEPLOYMENT

1. **Monitor for 24 hours:**
   - Watch error logs
   - Check performance metrics
   - Test all user flows

2. **Set up analytics:**
   - Google Analytics
   - Hotjar or similar
   - Conversion tracking

3. **Create runbook:**
   - Document deployment process
   - Note common issues and fixes
   - Create admin guide

4. **Plan for scale:**
   - Monitor database size
   - Watch memory/CPU usage
   - Plan for CDN if needed (Cloudflare)

5. **Security audit:**
   - Review all endpoints
   - Test authentication
   - Verify rate limiting
   - Check for vulnerabilities

---

## SUPPORT RESOURCES

- **Railway Docs:** https://docs.railway.app
- **Railway Discord:** https://discord.gg/railway
- **Railway Status:** https://railway.statuspage.io

---

Let me know once deployment is complete and we'll verify everything is working!