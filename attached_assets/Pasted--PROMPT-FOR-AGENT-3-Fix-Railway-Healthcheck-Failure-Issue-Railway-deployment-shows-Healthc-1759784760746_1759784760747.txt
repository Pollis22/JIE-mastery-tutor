# PROMPT FOR AGENT 3: Fix Railway Healthcheck Failure

## Issue
Railway deployment shows "Healthcheck failure" - the app built successfully but isn't responding to health checks.

---

## QUICK FIXES (Try in Order)

### Fix 1: Disable Healthcheck Temporarily

While we debug, let's disable the healthcheck:

1. In Railway dashboard, go to your service
2. Click **Settings** ‚Üí **Deploy**
3. Scroll to **Healthcheck**
4. **Disable** the healthcheck
5. Click **Deploy** ‚Üí **Deploy Now** to redeploy

This will let the app run while we fix the underlying issue.

---

### Fix 2: Ensure Server Binds to Correct Host and Port

**File: `server/index.js`** (CRITICAL FIX)

```javascript
const express = require('express');
const path = require('path');
const app = express();

// CRITICAL: Railway sets PORT environment variable
const PORT = process.env.PORT || 5000;
const HOST = '0.0.0.0'; // Must bind to 0.0.0.0, not localhost

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// CORS (if needed)
const cors = require('cors');
app.use(cors({
  origin: process.env.FRONTEND_URL || '*',
  credentials: true
}));

// Health check endpoint - MUST RESPOND QUICKLY
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'ok',
    timestamp: new Date().toISOString()
  });
});

// API routes
app.use('/api', require('./routes'));

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  const distPath = path.join(__dirname, '../dist');
  
  app.use(express.static(distPath, {
    maxAge: '1h',
    etag: true
  }));
  
  // Catch-all for client-side routing
  app.get('*', (req, res) => {
    res.sendFile(path.join(distPath, 'index.html'));
  });
}

// CRITICAL: Must bind to 0.0.0.0 for Railway
app.listen(PORT, HOST, () => {
  console.log(`‚úÖ Server running on http://${HOST}:${PORT}`);
  console.log(`Environment: ${process.env.NODE_ENV}`);
});

// Handle errors
process.on('unhandledRejection', (err) => {
  console.error('Unhandled rejection:', err);
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught exception:', err);
  process.exit(1);
});
```

**Key Changes:**
- ‚úÖ Binds to `0.0.0.0` not `localhost`
- ‚úÖ Uses Railway's `PORT` environment variable
- ‚úÖ Adds simple `/health` endpoint
- ‚úÖ Error handling for crashes

---

### Fix 3: Update Package.json Start Script

**File: `package.json`** (verify)

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "start": "node server/index.js",
    "db:migrate": "drizzle-kit push:pg"
  }
}
```

**Important:** 
- Use `node server/index.js` NOT `npm run dev`
- Don't use `nodemon` in production

---

### Fix 4: Check Build Output Exists

The app needs to serve built files. Verify build creates `dist` folder:

**File: `vite.config.js`** (verify)

```javascript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    emptyOutDir: true,
    sourcemap: false,
    rollupOptions: {
      output: {
        manualChunks: undefined,
      },
    },
  },
  server: {
    port: 5000,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true,
      },
    },
  },
});
```

---

### Fix 5: Add Procfile (Alternative Start Method)

**File: `Procfile`** (new file in root)

```
web: node server/index.js
```

This explicitly tells Railway how to start your app.

---

### Fix 6: Update Railway Settings

In Railway dashboard:

1. **Settings** ‚Üí **Deploy**
2. **Start Command:** `node server/index.js`
3. **Health Check Path:** `/health` (or disable)
4. **Health Check Timeout:** 300 seconds (5 minutes)
5. **Restart Policy:** On failure

---

### Fix 7: Check Environment Variables

Verify these are set in Railway:

```bash
# Required
NODE_ENV=production
PORT=<leave empty - Railway sets this>
DATABASE_URL=<from Railway PostgreSQL>

# Application
SESSION_SECRET=<your secret>
FRONTEND_URL=https://<your-railway-domain>.railway.app

# Optional (add only if you have them configured)
ELEVENLABS_API_KEY=<your key>
RESEND_API_KEY=<your key>
STRIPE_SECRET_KEY=<your key>
```

**Important:** Leave `PORT` empty - Railway sets it automatically.

---

### Fix 8: Simplify Server for Debugging

If still failing, create a minimal server to test:

**File: `server/index-minimal.js`** (temporary test file)

```javascript
const express = require('express');
const app = express();

const PORT = process.env.PORT || 5000;

app.get('/health', (req, res) => {
  res.json({ status: 'ok' });
});

app.get('/', (req, res) => {
  res.send('Hello from Railway!');
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
});
```

Update Railway start command to: `node server/index-minimal.js`

If this works, the issue is in your main server code.

---

## DEBUGGING STEPS

### Step 1: Check Build Logs

In Railway, click **Build Logs** tab and verify:
- ‚úÖ `npm ci` completes successfully
- ‚úÖ `npm run build` completes successfully
- ‚úÖ No errors in build phase
- ‚úÖ `dist` folder is created

### Step 2: Check Deploy Logs

Click **Deploy Logs** tab and look for:
- ‚úÖ "Server running on port..." message appears
- ‚úÖ No database connection errors
- ‚úÖ No module import errors
- ‚ùå Any error messages (share them with me)

### Step 3: Check Port Binding

Look for these in logs:
```
‚úÖ GOOD: Server running on http://0.0.0.0:3000
‚ùå BAD:  Server running on http://localhost:3000
‚ùå BAD:  Server running on http://127.0.0.1:3000
```

### Step 4: Test Manually

After deployment, try accessing:
```
https://<your-app>.railway.app/health
```

Should return: `{"status":"ok"}`

If you get a timeout or 503 error, the server isn't starting correctly.

---

## COMMON CAUSES & SOLUTIONS

### Cause 1: Wrong Host Binding
**Symptom:** App builds but healthcheck fails
**Fix:** Change `localhost` to `0.0.0.0` in listen()

### Cause 2: Database Connection Fails on Startup
**Symptom:** App crashes immediately after starting
**Fix:** Make database connection non-blocking:

```javascript
// ‚ùå BAD - crashes if DB fails
const db = require('./db'); // connects immediately

// ‚úÖ GOOD - lazy connection
let db;
app.use(async (req, res, next) => {
  if (!db) {
    db = require('./db');
  }
  next();
});
```

### Cause 3: Missing Dependencies
**Symptom:** Module not found errors in logs
**Fix:** Ensure all imports are in package.json dependencies (not devDependencies)

### Cause 4: Build Folder Not Created
**Symptom:** Can't find 'dist' directory
**Fix:** Verify vite build creates dist folder, check `.gitignore` doesn't exclude it

### Cause 5: Port Not Set Correctly
**Symptom:** App starts but Railway can't reach it
**Fix:** Use `process.env.PORT` and bind to `0.0.0.0`

---

## COMPLETE WORKING SERVER TEMPLATE

Here's a guaranteed working server.js for Railway:

```javascript
const express = require('express');
const path = require('path');
const app = express();

// Railway provides PORT, fallback to 5000
const PORT = process.env.PORT || 5000;

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// CORS
if (process.env.NODE_ENV === 'production') {
  const cors = require('cors');
  app.use(cors({
    origin: process.env.FRONTEND_URL,
    credentials: true
  }));
}

// Health check - FIRST, before any middleware that might fail
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Root route
app.get('/api', (req, res) => {
  res.json({ message: 'API is running' });
});

// Your API routes
try {
  const apiRoutes = require('./routes');
  app.use('/api', apiRoutes);
} catch (err) {
  console.error('Failed to load API routes:', err);
}

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  const distPath = path.join(__dirname, '../dist');
  
  // Check if dist exists
  const fs = require('fs');
  if (fs.existsSync(distPath)) {
    app.use(express.static(distPath));
    
    // Catch-all route for SPA
    app.get('*', (req, res) => {
      res.sendFile(path.join(distPath, 'index.html'));
    });
  } else {
    console.error('‚ö†Ô∏è  WARNING: dist folder not found at', distPath);
  }
}

// Error handling
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

// Start server - MUST bind to 0.0.0.0
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log('=================================');
  console.log(`‚úÖ Server started successfully`);
  console.log(`üì° Port: ${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üè• Health check: /health`);
  console.log('=================================');
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, closing server...');
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});

process.on('unhandledRejection', (err) => {
  console.error('‚ùå Unhandled rejection:', err);
});
```

---

## VERIFICATION CHECKLIST

After applying fixes:

- [ ] Server binds to `0.0.0.0` (not localhost)
- [ ] Uses `process.env.PORT`
- [ ] Has `/health` endpoint that responds quickly
- [ ] Build creates `dist` folder
- [ ] `package.json` has correct start script
- [ ] All environment variables set in Railway
- [ ] No database calls before server starts
- [ ] All dependencies in package.json

---

## NEXT STEPS

1. **Apply Fix 2** (update server/index.js with correct binding)
2. **Commit and push** to GitHub
3. **Railway will auto-deploy**
4. **Check Deploy Logs** for "Server running" message
5. **Test** `https://your-app.railway.app/health`

If still failing, share the **Deploy Logs** from Railway and I'll help debug further.

---

## Quick Railway Commands

```bash
# Install Railway CLI
npm i -g @railway/cli

# Login
railway login

# Link to your project
railway link

# View logs
railway logs

# Run command in Railway environment
railway run node server/index.js

# Open app
railway open
```

Let me know what you see in the Deploy Logs!