# AGENT 3: URGENT - Server Not Starting on Railway

## Problem
The build succeeds, but the server is not starting or is crashing immediately. Railway's healthcheck can't connect because there's no server running.

---

## STEP 1: Check Deploy Logs (Not Build Logs)

**In Railway:**
1. Click on the **failed deployment**
2. Click **"Deploy Logs"** tab (NOT Build Logs)
3. Look for error messages showing why the server crashed

**Common errors to look for:**
- Database connection errors
- Missing environment variables
- Module not found errors
- Port binding errors
- Syntax errors in code

---

## STEP 2: Fix Server Entry Point

**The server file MUST:**

1. **Use correct entry point path**
2. **Bind to 0.0.0.0 and PORT from environment**
3. **Not crash on startup**

### Update server/index.js:

```javascript
const express = require('express');
const path = require('path');

const app = express();

// CRITICAL: Get PORT from Railway environment
const PORT = process.env.PORT || 5000;
const HOST = '0.0.0.0'; // Must be 0.0.0.0 for Railway

console.log('=================================');
console.log('Starting server...');
console.log(`Environment: ${process.env.NODE_ENV}`);
console.log(`Port: ${PORT}`);
console.log('=================================');

// Basic middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check FIRST - before any other code that might fail
app.get('/api/health', (req, res) => {
  console.log('Health check called');
  res.status(200).json({ 
    status: 'ok',
    timestamp: new Date().toISOString(),
    port: PORT,
    env: process.env.NODE_ENV
  });
});

app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

app.get('/', (req, res) => {
  res.json({ message: 'TutorMind API is running' });
});

// IMPORTANT: Wrap database and route loading in try-catch
// Don't let DB errors crash the server on startup
let dbConnected = false;
try {
  // Only try to connect to DB after server is running
  // Don't require('./db') here if it connects immediately
  console.log('Database connection will be initialized on first request');
  dbConnected = true;
} catch (err) {
  console.error('⚠️  Database connection failed:', err.message);
  console.log('Server will start without database');
}

// Load API routes with error handling
try {
  const apiRoutes = require('./routes');
  app.use('/api', apiRoutes);
  console.log('✅ API routes loaded');
} catch (err) {
  console.error('⚠️  Failed to load API routes:', err.message);
  console.log('Server will start without API routes');
}

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  const distPath = path.join(__dirname, '../dist');
  const fs = require('fs');
  
  if (fs.existsSync(distPath)) {
    console.log('✅ Serving static files from:', distPath);
    app.use(express.static(distPath));
    
    app.get('*', (req, res) => {
      res.sendFile(path.join(distPath, 'index.html'));
    });
  } else {
    console.error('⚠️  dist folder not found at:', distPath);
  }
}

// Error handling
app.use((err, req, res, next) => {
  console.error('Error:', err);
  res.status(500).json({ error: 'Internal server error' });
});

// START SERVER - This MUST succeed
try {
  const server = app.listen(PORT, HOST, () => {
    console.log('=================================');
    console.log('✅ SERVER STARTED SUCCESSFULLY');
    console.log(`📡 Listening on: http://${HOST}:${PORT}`);
    console.log(`🏥 Health check: http://${HOST}:${PORT}/api/health`);
    console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log('=================================');
  });

  server.on('error', (err) => {
    console.error('❌ Server failed to start:', err);
    process.exit(1);
  });
} catch (err) {
  console.error('❌ Fatal error starting server:', err);
  process.exit(1);
}

// Keep process alive even if there are errors
process.on('uncaughtException', (err) => {
  console.error('❌ Uncaught Exception:', err);
  // Don't exit - let Railway retry
});

process.on('unhandledRejection', (err) => {
  console.error('❌ Unhandled Rejection:', err);
  // Don't exit - let Railway retry
});
```

---

## STEP 3: Fix package.json Start Command

**Verify package.json has correct start script:**

```json
{
  "name": "tutormind",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "start": "node server/index.js",
    "db:migrate": "drizzle-kit push:pg"
  },
  "dependencies": {
    "express": "^4.18.2",
    "dotenv": "^16.3.1",
    ...
  }
}
```

**CRITICAL:** The start script MUST be `node server/index.js` not:
- ❌ `npm run dev`
- ❌ `nodemon server/index.js`
- ❌ `node dist/index.js`

---

## STEP 4: Verify File Structure

**Make sure these files exist:**

```
project-root/
├── server/
│   └── index.js          ← Your server entry point
├── package.json          ← Has "start": "node server/index.js"
├── railway.json          ← Optional config
└── dist/                 ← Built frontend (after build)
```

**If your server file is in a different location:**
- Update start command in package.json to match
- Example: if server is at `src/server.js`, use `"start": "node src/server.js"`

---

## STEP 5: Check Database Connection

**If your server connects to database on startup, this might be crashing it.**

**FIX:** Make database connection lazy (connect on first use, not on server startup):

```javascript
// ❌ BAD - Connects immediately, crashes if DB unavailable
const db = require('./db'); // If this file connects on require()

// ✅ GOOD - Lazy connection
let db = null;

async function getDB() {
  if (!db) {
    db = require('./db');
  }
  return db;
}

// Use in routes:
app.get('/api/users', async (req, res) => {
  const database = await getDB();
  const users = await database.query.users.findMany();
  res.json(users);
});
```

---

## STEP 6: Add Logging to See What's Happening

**Add console.log statements everywhere** to see where it crashes:

```javascript
console.log('1. Starting imports...');
const express = require('express');
console.log('2. Express imported');

const app = express();
console.log('3. App created');

const PORT = process.env.PORT || 5000;
console.log('4. Port:', PORT);

// Add health check
console.log('5. Adding health check...');
app.get('/api/health', (req, res) => {
  console.log('Health check hit!');
  res.json({ status: 'ok' });
});
console.log('6. Health check added');

// Start server
console.log('7. Starting server...');
app.listen(PORT, '0.0.0.0', () => {
  console.log('8. SERVER RUNNING ON PORT', PORT);
});
```

This will show exactly where the crash happens.

---

## STEP 7: Simplify - Create Minimal Server

**Create a new file `server/index-minimal.js`:**

```javascript
const express = require('express');
const app = express();

const PORT = process.env.PORT || 5000;

app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'Minimal server running' });
});

app.get('/', (req, res) => {
  res.send('Hello from Railway!');
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`✅ Server running on port ${PORT}`);
});
```

**Update package.json:**
```json
"start": "node server/index-minimal.js"
```

**Commit and push.** If this works, the problem is in your main server code.

---

## STEP 8: Check Railway Environment Variables

**Verify DATABASE_URL is set correctly:**

1. In Railway, click on **Postgres** service
2. Click **"Variables"** tab
3. Find **DATABASE_URL**
4. Copy the value
5. Go back to your **JIE-mastery-tutor** service
6. Click **"Variables"** tab
7. Make sure **DATABASE_URL** is there
8. If not, add it manually

**Important:** If DATABASE_URL is missing or wrong, and your server tries to connect on startup, it will crash.

---

## STEP 9: Update railway.json

**Make sure railway.json has these settings:**

```json
{
  "$schema": "https://railway.app/railway.schema.json",
  "build": {
    "builder": "NIXPACKS"
  },
  "deploy": {
    "startCommand": "node server/index.js",
    "healthcheckPath": "/api/health",
    "healthcheckTimeout": 300,
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

---

## STEP 10: Check for Missing Dependencies

**The server might crash because of missing npm packages.**

**In package.json, verify all imports are listed in dependencies:**

```json
{
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "pg": "^8.11.0",
    "drizzle-orm": "^0.28.0"
    // Add ALL packages you're importing in server/index.js
  }
}
```

**If you're importing something that's not in dependencies, add it:**

```bash
npm install <package-name>
```

Then commit package.json changes.

---

## DEBUGGING CHECKLIST

- [ ] Server file exists at path specified in package.json start script
- [ ] Server binds to `0.0.0.0` and `process.env.PORT`
- [ ] Health check endpoint `/api/health` added
- [ ] No database connection on startup (make it lazy)
- [ ] All imports are in package.json dependencies
- [ ] DATABASE_URL environment variable is set in Railway
- [ ] No syntax errors in server/index.js
- [ ] Console.log statements added to track startup
- [ ] Tested minimal server to isolate the issue

---

## NEXT STEPS

1. **Add extensive logging** to server/index.js
2. **Commit and push** to GitHub
3. **Watch Deploy Logs** in Railway (not Build Logs)
4. **Look for the last log message** before it crashes
5. **Share those logs** if still failing

---

## MOST LIKELY CAUSES

Based on the symptoms:

1. **Server file path wrong** - package.json start command points to wrong file
2. **Database crashes server** - Connecting to DB on startup fails
3. **Missing dependencies** - Importing packages not in package.json
4. **Port binding wrong** - Not using `process.env.PORT` or binding to `localhost`
5. **Syntax error** - Code has errors preventing server from starting

**Fix these in order, commit each fix, and watch the deploy logs to see which one works!**